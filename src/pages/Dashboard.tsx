import { Progress } from "@/components/ui/progress";
import { Button } from "@/components/ui/button";
import { Link } from "react-router-dom";
import { BookOpen, Video, CheckCircle } from "lucide-react";
import { useState, useEffect } from "react";

import { Card } from "@/components/ui/card";
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import { useAuth } from "@/contexts/AuthContext";
import ChatMessages from "@/components/chat/ChatMessages";
import ChatInput from "@/components/chat/ChatInput";
import { sendChatMessage } from "@/services/chatService";
import { useStudentSkills } from "@/hooks/useStudentSkills";
import { useChatContext } from "@/contexts/ChatContext";

interface Message {
  id: number;
  text: string;
  isUser: boolean;
  timestamp: Date;
  problemId?: string;
}

const Dashboard = () => {
  const { user } = useAuth();
  const { topicProgress, generalPreparedness, isLoading } = useStudentSkills();
  const { messages, isTyping, isDatabaseMode, setMessages, setIsTyping, addMessage } = useChatContext();
  const userName = user?.user_metadata?.full_name || user?.email?.split('@')[0] || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  
  // Initialize welcome messages if chat is empty
  useEffect(() => {
    if (messages.length === 0 && !isLoading && topicProgress.length > 0) {
      // Find topics that need improvement (below 70%)
      const topicsToImprove = topicProgress
        .filter(topic => topic.averageScore < 70)
        .sort((a, b) => a.averageScore - b.averageScore)
        .slice(0, 3);

      let welcomeMessage = `–ü—Ä–∏–≤–µ—Ç, ${userName}! –†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞. `;
      
      if (generalPreparedness >= 80) {
        welcomeMessage += `–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å ‚Äî ${generalPreparedness}%! –¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏ –∫ —É—Å–ø–µ—Ö—É –Ω–∞ –û–ì–≠. üéØ`;
      } else if (generalPreparedness >= 60) {
        welcomeMessage += `–£ —Ç–µ–±—è —Ö–æ—Ä–æ—à–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å ‚Äî ${generalPreparedness}%. –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™`;
      } else {
        welcomeMessage += `–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å ‚Äî ${generalPreparedness}%. –ï—Å—Ç—å –Ω–∞–¥ —á–µ–º –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–ª—É—á—à–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! üìö`;
      }

      let recommendationMessage = "";
      
      if (topicsToImprove.length > 0) {
        recommendationMessage = `**–†–µ–∫–æ–º–µ–Ω–¥—É—é —Å–µ–≥–æ–¥–Ω—è –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —ç—Ç–∏–º–∏ —Ç–µ–º–∞–º–∏:**\n\n`;
        
        topicsToImprove.forEach((topic, index) => {
          const topicNumber = topic.topic;
          recommendationMessage += `${index + 1}. **${topic.name}** (${topic.averageScore}%)\n`;
          recommendationMessage += `   üìñ [–ò–∑—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª](/textbook?topic=${topicNumber})\n\n`;
        });

        recommendationMessage += `–ù–∞—á–Ω–∏ —Å –∏–∑—É—á–µ–Ω–∏—è —Ç–µ–æ—Ä–∏–∏, –∞ –∑–∞—Ç–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–¥–∞–Ω–∏—è–º. –£–¥–∞—á–∏! üöÄ`;
      } else {
        recommendationMessage = `const recommendationMessage = `<div className="prose">
  <p><strong>üî• –ù—É —á—Ç–æ, –ø–æ–µ—Ö–∞–ª–∏ –¥–∞–ª—å—à–µ! –°–µ–≥–æ–¥–Ω—è —É –Ω–∞—Å ‚Äî –ü—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ–¥–æ–±–∏—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤</strong></p>
  <p>–¢—ã —É–∂–µ –ø—Ä–æ—à—ë–ª(–∞) –Ω–µ–º–∞–ª–æ —Ç–µ–º ‚Äî –¥–≤–∏–∂–µ–º—Å—è –ø–æ –ø–ª–∞–Ω—É —à–∞–≥ –∑–∞ —à–∞–≥–æ–º üöÇ</p>
  <p>–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Ç–µ–º–∞ –≤–∞–∂–Ω–∞—è –∏ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –Ω–∞ –û–ì–≠, —Ç–∞–∫ —á—Ç–æ –¥–∞–≤–∞–π —Ä–∞–∑–ª–æ–∂–∏–º –≤—Å—ë –ø–æ –ø–æ–ª–æ—á–∫–∞–º:</p>

  <p>üìò <a href="/textbook2" style={{ color: "#10b981", textDecoration: "underline" }}>–ò–∑—É—á–∏—Ç—å —Ç–µ–æ—Ä–∏—é</a> ‚Äî —Ä–∞–∑–±–µ—Ä–∏—Å—å –≤ –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö –∏ –æ—Å–Ω–æ–≤–∞—Ö</p>
  <p>üé• <a href="/videos" style={{ color: "#10b981", textDecoration: "underline" }}>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ</a> ‚Äî –æ–±—ä—è—Å–Ω—è—é –≤—Å—ë –Ω–∞ –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö</p>
  <p>üß† <a href="/videos?style=brainrot" style={{ color: "#10b981", textDecoration: "underline" }}>Brainrot-–≤–∏–¥–µ–æ</a> ‚Äî –µ—Å–ª–∏ —Ö–æ—á–µ—Ç—Å—è —É—á–∏—Ç—å—Å—è –ø–æ–¥ –º–µ–º—á–∏–∫–∏ üòè</p>
  <p>‚úçÔ∏è <a href="/practice" style={{ color: "#10b981", textDecoration: "underline" }}>–ü–æ–ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è</a> ‚Äî —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å—Ç—ã–µ, –ø–æ—Ç–æ–º –û–ì–≠-—É—Ä–æ–≤–µ–Ω—å</p>

  <p><strong>üéØ –ò, –∫–∞–∫ –≤—Å–µ–≥–¥–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç—å –¥–Ω—è:</strong></p>
  <p>üîé <a href="/fipi-bank" style={{ color: "#10b981", textDecoration: "underline" }}>–ë–∞–Ω–∫ –∑–∞–¥–∞–Ω–∏–π –§–ò–ü–ò</a> ‚Äî —Ä–µ—à–∞–π —Ö–æ—Ç—è –±—ã 1‚Äì2 –∑–∞–¥–∞—á–∏ –≤ –¥–µ–Ω—å, –∏ —Ç—ã —Ç–æ—á–Ω–æ –ø—Ä–æ–∫–∞—á–∞–µ—à—å—Å—è üí™</p>
  <p>–ù–∞—á–Ω–∏ —Å —Ç–µ–æ—Ä–∏–∏ ‚Äî –¥–∞–ª—å—à–µ –≤—Å—ë –ø–æ–π–¥—ë—Ç –∫–∞–∫ –ø–æ –º–∞—Å–ª—É. –ï—Å–ª–∏ —á—Ç–æ ‚Äî —è —Ä—è–¥–æ–º üòâ</p>
</div>
`;
`;
      }

      const welcomeMessages = [
        {
          id: 1,
          text: welcomeMessage,
          isUser: false,
          timestamp: new Date()
        },
        {
          id: 2,
          text: recommendationMessage,
          isUser: false,
          timestamp: new Date()
        }
      ];
      
      setMessages(welcomeMessages);
    }
  }, [messages.length, userName, generalPreparedness, topicProgress, isLoading, setMessages]);
  
  const handleSendMessage = async (userInput: string) => {
    if (userInput.trim() === "") return;

    // Add user message
    const newUserMessage = {
      id: messages.length + 1,
      text: userInput,
      isUser: true,
      timestamp: new Date()
    };
    
    addMessage(newUserMessage);
    setIsTyping(true);

    try {
      // Send message to AI and get response using Groq API
      const aiResponse = await sendChatMessage(newUserMessage, messages, isDatabaseMode);
      addMessage(aiResponse);
    } finally {
      setIsTyping(false);
    }
  };
  
  return (
    <div className="min-h-screen bg-background flex flex-col">
      <Header />
      <div className="flex flex-1 pt-16">
      {/* Sidebar */}
      <div className="w-64 bg-card border-r border-border flex flex-col">
        <div className="p-4 border-b border-border">
          <h1 className="text-lg font-semibold text-foreground">–Å–∂–∏–∫ AI</h1>
          <p className="text-sm text-muted-foreground">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {userName}</p>
        </div>
        
        <div className="flex-1 p-4 space-y-4">
          <div className="bg-muted/50 p-4 rounded-lg">
            <h3 className="font-medium text-foreground mb-2">–ü—Ä–æ–≥—Ä–µ—Å—Å –û–ì–≠</h3>
            <div className="space-y-2">
              {isLoading ? (
                <div className="text-sm text-muted-foreground">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
              ) : (
                <div>
                  <div className="flex justify-between text-sm mb-1">
                    <span className="text-muted-foreground">–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å</span>
                    <span className="text-foreground font-medium">{generalPreparedness}%</span>
                  </div>
                  <Progress value={generalPreparedness} className="h-2" />
                </div>
              )}
            </div>
          </div>
          
          <div className="space-y-2">
            <Button variant="ghost" asChild className="w-full justify-start h-auto p-3">
              <Link to="/daily-practice" className="flex items-center gap-3">
                <CheckCircle className="w-4 h-4" />
                <div className="text-left">
                  <div className="font-medium">–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞</div>
                  <div className="text-xs text-muted-foreground">–†–µ—à–∞–π –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å</div>
                </div>
              </Link>
            </Button>
            
            <Button variant="ghost" asChild className="w-full justify-start h-auto p-3">
              <Link to="/textbook" className="flex items-center gap-3">
                <BookOpen className="w-4 h-4" />
                <div className="text-left">
                  <div className="font-medium">–£—á–µ–±–Ω–∏–∫</div>
                  <div className="text-xs text-muted-foreground">–ò–∑—É—á–∞–π —Ç–µ–æ—Ä–∏—é</div>
                </div>
              </Link>
            </Button>
            
            <Button variant="ghost" asChild className="w-full justify-start h-auto p-3">
              <Link to="/videos" className="flex items-center gap-3">
                <Video className="w-4 h-4" />
                <div className="text-left">
                  <div className="font-medium">–í–∏–¥–µ–æ—É—Ä–æ–∫–∏</div>
                  <div className="text-xs text-muted-foreground">–°–º–æ—Ç—Ä–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è</div>
                </div>
              </Link>
            </Button>
            
            <Button variant="ghost" asChild className="w-full justify-start h-auto p-3">
              <Link to="/practice" className="flex items-center gap-3">
                <CheckCircle className="w-4 h-4" />
                <div className="text-left">
                  <div className="font-medium">–ü—Ä–∞–∫—Ç–∏–∫–∞</div>
                  <div className="text-xs text-muted-foreground">–¢—Ä–µ–Ω–∏—Ä—É–π—Å—è —Ä–µ—à–∞—Ç—å</div>
                </div>
              </Link>
            </Button>
          </div>
        </div>
      </div>

      {/* Main Chat Area */}
      <div className="flex-1 flex flex-col">
        <div className="border-b border-border bg-card">
          <div className="p-4">
            <div className="flex items-center gap-2">
              <div className="w-2 h-2 bg-green-500 rounded-full"></div>
              <span className="font-medium text-foreground">–Å–∂–∏–∫ AI</span>
              <span className="text-sm text-muted-foreground">‚Ä¢ –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π</span>
            </div>
          </div>
        </div>
        
        <div className="flex-1 flex flex-col max-w-4xl mx-auto w-full">
          <div className="flex-1">
            <ChatMessages messages={messages} isTyping={isTyping} />
          </div>
          <div className="border-t border-border bg-card">
            <div className="max-w-3xl mx-auto">
              <ChatInput onSendMessage={handleSendMessage} isTyping={isTyping} />
            </div>
          </div>
        </div>
      </div>
      </div>
    </div>
  );
};

export default Dashboard;
