import { Progress } from "@/components/ui/progress";
import { Button } from "@/components/ui/button";
import { Link } from "react-router-dom";
import { BookOpen, Video, CheckCircle } from "lucide-react";
import { useState, useEffect } from "react";

import { Card } from "@/components/ui/card";
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import { useAuth } from "@/contexts/AuthContext";
import ChatMessages from "@/components/chat/ChatMessages";
import ChatInput from "@/components/chat/ChatInput";
import { sendChatMessage } from "@/services/chatService";
import { useStudentSkills } from "@/hooks/useStudentSkills";
import { useChatContext } from "@/contexts/ChatContext";

interface Message {
  id: number;
  text: string;
  isUser: boolean;
  timestamp: Date;
  problemId?: string;
}

const Dashboard = () => {
  const { user } = useAuth();
  const { topicProgress, generalPreparedness, isLoading } = useStudentSkills();
  const { messages, isTyping, isDatabaseMode, setMessages, setIsTyping, addMessage } = useChatContext();
  const userName = user?.user_metadata?.full_name || user?.email?.split('@')[0] || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  
  // Initialize welcome messages if chat is empty
  useEffect(() => {
    if (messages.length === 0 && !isLoading && topicProgress.length > 0) {
      // Find topics that need improvement (below 70%)
      const topicsToImprove = topicProgress
        .filter(topic => topic.averageScore < 70)
        .sort((a, b) => a.averageScore - b.averageScore)
        .slice(0, 3);

      let welcomeMessage = `–ü—Ä–∏–≤–µ—Ç, ${userName}! –†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞. `;
      
      if (generalPreparedness >= 80) {
        welcomeMessage += `–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å ‚Äî ${generalPreparedness}%! –¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏ –∫ —É—Å–ø–µ—Ö—É –Ω–∞ –û–ì–≠. üéØ`;
      } else if (generalPreparedness >= 60) {
        welcomeMessage += `–£ —Ç–µ–±—è —Ö–æ—Ä–æ—à–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å ‚Äî ${generalPreparedness}%. –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™`;
      } else {
        welcomeMessage += `–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å ‚Äî ${generalPreparedness}%. –ï—Å—Ç—å –Ω–∞–¥ —á–µ–º –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–ª—É—á—à–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! üìö`;
      }

      let recommendationMessage = "";
      
      if (topicsToImprove.length > 0) {
        recommendationMessage = `**–†–µ–∫–æ–º–µ–Ω–¥—É—é —Å–µ–≥–æ–¥–Ω—è –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —ç—Ç–∏–º–∏ —Ç–µ–º–∞–º–∏:**\n\n`;
        
        topicsToImprove.forEach((topic, index) => {
          const topicNumber = topic.topic;
          recommendationMessage += `${index + 1}. **${topic.name}** (${topic.averageScore}%)\n`;
          recommendationMessage += `   üìñ [–ò–∑—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª](/textbook2?skill=${topicNumber})\n\n`;
        });

        recommendationMessage += `–ù–∞—á–Ω–∏ —Å –∏–∑—É—á–µ–Ω–∏—è —Ç–µ–æ—Ä–∏–∏, –∞ –∑–∞—Ç–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–¥–∞–Ω–∏—è–º. –£–¥–∞—á–∏! üöÄ`;
      } else {
        recommendationMessage = `–û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã —É —Ç–µ–±—è –Ω–∞ —Ö–æ—Ä–æ—à–µ–º —É—Ä–æ–≤–Ω–µ. –†–µ–∫–æ–º–µ–Ω–¥—É—é:\n\n`;
        recommendationMessage += `‚Ä¢ üéØ [–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞](/daily-practice) –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤\n`;
        recommendationMessage += `‚Ä¢ üì∫ [–í–∏–¥–µ–æ—É—Ä–æ–∫–∏](/resources?tab=videos) –¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π\n`;
        recommendationMessage += `‚Ä¢ üìù [–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è](/practice) –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è`;
      }

      const welcomeMessages = [
        {
          id: 1,
          text: welcomeMessage,
          isUser: false,
          timestamp: new Date()
        },
        {
          id: 2,
          text: recommendationMessage,
          isUser: false,
          timestamp: new Date()
        }
      ];
      
      setMessages(welcomeMessages);
    }
  }, [messages.length, userName, generalPreparedness, topicProgress, isLoading, setMessages]);
  
  const handleSendMessage = async (userInput: string) => {
    if (userInput.trim() === "") return;

    // Add user message
    const newUserMessage = {
      id: messages.length + 1,
      text: userInput,
      isUser: true,
      timestamp: new Date()
    };
    
    addMessage(newUserMessage);
    setIsTyping(true);

    try {
      // Send message to AI and get response using Groq API
      const aiResponse = await sendChatMessage(newUserMessage, messages, isDatabaseMode);
      addMessage(aiResponse);
    } finally {
      setIsTyping(false);
    }
  };
  
  return (
    <div className="min-h-screen bg-white flex flex-col">
      <Header />
      <main className="flex-1 pt-20">
        <section className="bg-gradient-to-b from-primary/10 to-primary/5 py-12">
          <div className="container mx-auto px-4">
            <div className="flex flex-col md:flex-row gap-8">
              <div className="md:w-1/3 space-y-6">
                <div>
                  <h1 className="text-3xl font-bold text-primary mb-2">–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {userName}!</h1>
                  <p className="text-gray-700">–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—É—á–µ–Ω–∏–µ.</p>
                </div>
                
                <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-100">
                  <h2 className="text-xl font-semibold text-gray-800 mb-4">–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –û–ì–≠</h2>
                  <div className="space-y-4">
                    {isLoading ? (
                      <div className="text-center py-4">
                        <div className="text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
                      </div>
                    ) : (
                      <div>
                        <div className="flex justify-between mb-1">
                          <span className="text-sm text-gray-700">–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å</span>
                          <span className="text-sm font-medium text-primary">{generalPreparedness}%</span>
                        </div>
                        <Progress value={generalPreparedness} className="h-3 bg-primary/20" />
                      </div>
                    )}
                  </div>
                  
                  <div className="mt-6 flex space-x-3">
                    <Button variant="outline" asChild className="flex gap-2 border-primary/70 text-primary">
                      <Link to="/resources"><BookOpen className="w-4 h-4" /> –£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</Link>
                    </Button>
                    <Button asChild className="flex gap-2 bg-primary">
                      <Link to="/practice"><CheckCircle className="w-4 h-4" /> –ü—Ä–∞–∫—Ç–∏–∫–∞</Link>
                    </Button>
                  </div>
                </div>
                
                <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-100">
                  <h2 className="text-xl font-semibold text-gray-800 mb-4">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h2>
                  <div className="space-y-3">
                    <Button asChild className="w-full bg-primary justify-start">
                      <Link to="/daily-practice">
                        <CheckCircle className="w-4 h-4 mr-2" />
                        –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞
                      </Link>
                    </Button>
                    <Button variant="outline" asChild className="w-full justify-start">
                      <Link to="/textbook2">
                        <BookOpen className="w-4 h-4 mr-2" />
                        –£—á–µ–±–Ω–∏–∫
                      </Link>
                    </Button>
                    <Button variant="outline" asChild className="w-full justify-start">
                      <Link to="/resources?tab=videos">
                        <Video className="w-4 h-4 mr-2" />
                        –í–∏–¥–µ–æ—É—Ä–æ–∫–∏
                      </Link>
                    </Button>
                  </div>
                </div>
              </div>
              
              <div className="md:w-2/3">
                <Card className="bg-white shadow-xl rounded-xl overflow-hidden border-0 h-[600px] flex flex-col">
                  <div className="bg-gradient-to-r from-primary to-secondary p-4">
                    <h3 className="text-white font-medium flex items-center gap-2">
                      <span className="h-2 w-2 rounded-full bg-accent animate-pulse"></span>
                      –Å–∂–∏–∫ AI
                    </h3>
                  </div>
                  
                  <ChatMessages messages={messages} isTyping={isTyping} />
                  <ChatInput onSendMessage={handleSendMessage} isTyping={isTyping} />
                </Card>
              </div>
            </div>
          </div>
        </section>
      </main>
      <Footer />
    </div>
  );
};

export default Dashboard;
