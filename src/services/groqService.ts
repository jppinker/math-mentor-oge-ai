
import { getRandomMathProblem, getMathProblemById } from "@/services/mathProblemsService";
import { supabase } from "@/integrations/supabase/client";

// Groq API service for chat completions
export interface Message {
  role: 'system' | 'user' | 'assistant'; 
  content: string;
}

// Enhanced system prompt for the math tutor
const SYSTEM_PROMPT: Message = {
  role: 'system',
  content: `You are "–Å–∂–∏–∫" (Hedgehog), a helpful and patient high school math teacher specializing in Russian OGE (–û–ì–≠) exam preparation. You explain math concepts step-by-step and adapt to the student's level. 

Key capabilities:
- Use LaTeX notation for mathematical expressions: inline math with \\(...\\) or $...$ and block math with \\[...\\] or $$...$$
- Keep responses in Russian language
- Break down complex topics into simple steps
- Answer general math questions and provide explanations
- Help students understand mathematical concepts

You can discuss any math-related topics, explain formulas, solve problems, and provide educational guidance. When students need practice problems, they will be provided automatically from our database.

Remember: You are a patient, encouraging teacher who helps students learn mathematics effectively through conversation and explanation.`
};

export async function streamChatCompletion(messages: Message[]): Promise<ReadableStream<Uint8Array> | null> {
  try {
    const fullMessages = [SYSTEM_PROMPT, ...messages];

    const { data, error } = await supabase.functions.invoke('groq-chat', {
      body: { messages: fullMessages, stream: true }
    });

    if (error) {
      console.error('Groq function error:', error);
      throw new Error(`Groq function error: ${error.message}`);
    }

    // The response should be a stream
    return data;
  } catch (error) {
    console.error('Error streaming from Groq:', error);
    return null;
  }
}

function extractLastQuestionId(messages: Message[]): string | null {
  for (let i = messages.length - 1; i >= 0; i--) {
    const match = messages[i].content.match(/ID –∑–∞–¥–∞—á–∏: ([\w-]+)/);
    if (match) return match[1];
  }
  return null;
}

export async function getChatCompletion(messages: Message[]): Promise<string> {
  try {
    const lastMessage = messages[messages.length - 1]?.content.toLowerCase();

    // Step 1: Handle follow-up (answer/solution/details)
    if (lastMessage.includes('–ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç') || lastMessage.includes('–ø–æ–∫–∞–∂–∏ —Ä–µ—à–µ–Ω–∏–µ') || lastMessage.includes('–Ω–µ –ø–æ–Ω—è–ª')) {
      const questionId = extractLastQuestionId(messages);
      if (!questionId) return "–Ø –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–¥–∞—á—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—Ä–æ—Å–∏ –Ω–æ–≤—É—é.";

      const problem = await getMathProblemById(questionId);
      if (!problem) return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–¥–∞—á—É –ø–æ ID.";

      if (lastMessage.includes('–ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç')) {
        return `üìå –û—Ç–≤–µ—Ç: **${problem.answer}**`;
      }

      if (lastMessage.includes('–ø–æ–∫–∞–∂–∏ —Ä–µ—à–µ–Ω–∏–µ')) {
        return problem.solution_text || "–†–µ—à–µ–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.";
      }

      if (lastMessage.includes('–Ω–µ –ø–æ–Ω—è–ª')) {
        return problem.solutiontextexpanded || "–ü–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –Ω–µ—Ç.";
      }
    }

    // Step 2: Handle new problem request
    if (lastMessage.includes('–∑–∞–¥–∞—á—É')) {
      let category: string | undefined = undefined;

      if (lastMessage.includes('–∞–ª–≥–µ–±—Ä')) category = '–∞–ª–≥–µ–±—Ä–∞';
      else if (lastMessage.includes('–∞—Ä–∏—Ñ–º–µ—Ç–∏–∫')) category = '–∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞';
      else if (lastMessage.includes('–≥–µ–æ–º–µ—Ç—Ä')) category = '–≥–µ–æ–º–µ—Ç—Ä–∏—è';
      else if (lastMessage.includes('–ø—Ä–∞–∫—Ç–∏—á')) category = '–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞';

      const problem = await getRandomMathProblem(category);

      if (problem) {
       
        const rawImage = problem.problem_image?.replace(/^\/+/, '');
        const imageUrl = rawImage?.startsWith('http')
          ? rawImage
          : `https://casohrqgydyyvcclqwqm.supabase.co/storage/v1/object/public/images/${rawImage}`;

        
        const imagePart = problem.problem_image ? `üñºÔ∏è ![–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ](${imageUrl})\n\n` : "";

        return `–í–æ—Ç –∑–∞–¥–∞—á–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *${category ?? '–û–±—â–µ–µ'}*:\n\n${imagePart}${problem.problem_text}\n\n(üìå ID –∑–∞–¥–∞—á–∏: ${problem.question_id})\n\n–ù–∞–ø–∏—à–∏ *–ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç* –∏–ª–∏ *–ø–æ–∫–∞–∂–∏ —Ä–µ—à–µ–Ω–∏–µ*, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.`;
      }

      return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–¥–∞—á—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.";
    }

    // Step 3: Default to Groq completion
    const fullMessages = [SYSTEM_PROMPT, ...messages];
    
    const { data, error } = await supabase.functions.invoke('groq-chat', {
      body: { messages: fullMessages, stream: false }
    });

    if (error) {
      console.error('Groq function error:', error);
      throw new Error(`Groq function error: ${error.message}`);
    }

    return data.choices[0].message.content;
  } catch (error) {
    console.error('Chat completion error:', error);
    return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.';
  }
}
